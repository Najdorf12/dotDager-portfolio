/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 scene.gltf 
Author: luc1906 (https://sketchfab.com/luc1906)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/living-things-7dc9e33d87004ddb86179a430e7e2871
Title: LIVING THINGS
*/

import { useGLTF, Float } from "@react-three/drei";
import React, { useRef, useLayoutEffect } from "react";
import { GUI } from "dat.gui";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
gsap.registerPlugin(ScrollTrigger);
export function Scene(props) {
  const { nodes, materials } = useGLTF("/scene.gltf");
  const scene = useRef();
  const tl = gsap.timeline();
  const screen = window.screen.width;

  useLayoutEffect(() => {
    new ScrollTrigger({});
    tl.to(scene.current?.position, {
      x: screen > 1000 ? -2.1 : -0.5,
      y: screen > 1000 ? 0.1 : 0,
      z: screen > 1000 ? 2.3 : 2,
      ease: "power1.out",
      scrollTrigger: {
        trigger: "#second_section",
        start: "top bottom",
        end: "top top",
        scrub: true,
        immediateRender: false,
      },
    })
      .to(scene.current?.rotation, {
        x: screen > 1000 ? -0.2 : -0.2,
        y: screen > 1000 ? 2.0 : 2.0,
        z: screen > 1000 ? 0.1 : 0.1,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#second_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.position, {
        x: screen > 1000 ? -1.3 : -3,
        y: screen > 1000 ? -0.02 : -0.1,
        z: screen > 1000 ? 2.4 : -0.2,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#third_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.rotation, {
        x: screen > 1000 ? 0.4 : 0.4,
        y: screen > 1000 ? 1.5 : 1.5,
        z: screen > 1000 ? -0.4 : -0.4,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#third_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.position, {
        x: screen > 1000 ? -0.2 : 0,
        y: screen > 1000 ? 0.2 : 0,
        z: screen > 1000 ? -0.3 : 0,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#four_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.rotation, {
        x: screen > 1000 ? 0.2 : 0,
        y: screen > 1000 ? 0.1 : 0,
        z: screen > 1000 ? 0.1 : 0,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#four_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.position, {
        x: screen > 1000 ? -0.35 :  -3,
        y: screen > 1000 ? 0.1 :  -0.7,
        z: screen > 1000 ? 0.2 :  -0.2,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#five_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.current?.rotation, {
        x: screen > 1000 ? 0.32 : 0.4,
        y: screen > 1000 ? 0.72 : 1.3,
        z: screen > 1000 ? -0.2 : -0.4,
        ease: "power1.out",
        scrollTrigger: {
          trigger: "#five_section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      });
  }, []);

  /* DEBUG MODEL3D */
  /*  useLayoutEffect(() => {
    const gui = new GUI({ width: 400 });

    const debugRotation = {
      rotation: {
        x: 0,
        y: 0,
        z: 0,
      },
    };
    const debugPosition = {
      position: {
        x: 0,
        y: 0,
        z: 0,
      },
    };

    //Rotation
    gui
      .add(debugRotation.rotation, "x")
      .min(-30)
      .max(30)
      .step(0.005)
      .onChange(() => {
        scene.current.rotation.x = debugRotation.rotation.x;
      })
      .name("Rotation X");
    gui
      .add(debugRotation.rotation, "y")
      .min(-30)
      .max(30)
      .step(0.005)
      .onChange(() => {
        scene.current.rotation.y = debugRotation.rotation.y;
      })
      .name("Rotation Y");
    gui
      .add(debugRotation.rotation, "z")
      .min(-30)
      .max(30)
      .step(0.005)
      .onChange(() => {
        scene.current.rotation.z = debugRotation.rotation.z;
      })
      .name("Rotation Z");
    // Position
    gui
      .add(debugPosition.position, "x")
      .min(-30)
      .max(30)
      .step(0.005)
      .onChange(() => {
        scene.current.position.x = debugPosition.position.x;
      })
      .name("Posit X");
    gui
      .add(debugPosition.position, "y")
      .min(-30)
      .max(30)
      .step(0.005)
      .onChange(() => {
        scene.current.position.y = debugPosition.position.y;
      })
      .name("Posit Y");
    gui
      .add(debugPosition.position, "z")
      .min(-700)
      .max(300)
      .step(0.00005)
      .onChange(() => {
        scene.current.position.z = debugPosition.position.z;
      })
      .name("Posit Z");

    return () => {
      gui.destroy();
    };
  }, []);   */
  return (
    <group ref={scene} {...props} dispose={null}>
      <group scale={1.044}>
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials["kt_facebuilder_material.001"]}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.kt_facebuilder_material}
          scale={1.035}
        />
      </group>
      <group scale={1.049}>
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials["kt_facebuilder_material.003"]}
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials["kt_facebuilder_material.003"]}
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials["kt_facebuilder_material.003"]}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials["kt_facebuilder_material.003"]}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials["kt_facebuilder_material.003"]}
        />
      </group>
      <mesh
        geometry={nodes.Object_8.geometry}
        material={materials["kt_facebuilder_material.002"]}
      />
      <mesh
        geometry={nodes.Object_9.geometry}
        material={materials["Material.001"]}
      />
      {/* <mesh geometry={nodes.Object_17.geometry} material={materials['kt_facebuilder_material.004']} scale={1.072} /> */}
      {/* <mesh geometry={nodes.Object_19.geometry} material={materials['kt_facebuilder_material.004']} scale={1.383} /> */}
    </group>
  );
}

useGLTF.preload("/scene.gltf");
